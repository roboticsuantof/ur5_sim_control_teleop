<?xml version="1.0"?>
<launch>
  
  <param name="use_sim_time" value="true"/>
  <arg name="limited" default="true"  doc="If true, limits joint range [-PI, PI] on all joints." />
  <arg name="paused" default="false" doc="Starts gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts gazebo gui" />
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
  
  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--arg name="world_name" default="worlds/empty.world"/-->
    <arg name="world_name" value="$(find myur5_description)/worlds/inspeccion_1.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
   
  </include>

  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
  <arg name="load_robot_description" default="false"/>

  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>

  <param name="robot_description" command="$(find xacro)/xacro '$(find myur5_description)/urdf/myur5.urdf.xacro' transmission_hw_interface:=$(arg transmission_hw_interface)" />
  <!-- <param name="robot_description" textfile="$(find myur5_description)/urdf/myur5.urdf"/> -->

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model ur5 -z 0.0" respawn="false" output="screen" />
    <include file="$(find ur_gazebo)/launch/controller_utils.launch"/>

  <!-- start this controller -->
  <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>
  
  <arg name="dev" default="/dev/input/js1" />
    

  <!-- The semantic description that corresponds to the URDF -->
  <param name="$(arg robot_description)_semantic" textfile="$(find myur5_moveit_config)/config/myur5.srdf" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="$(arg robot_description)_planning">
    <rosparam command="load" file="$(find myur5_moveit_config)/config/joint_limits.yaml"/>
    <rosparam command="load" file="$(find myur5_moveit_config)/config/cartesian_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="$(arg robot_description)_kinematics">
    <rosparam command="load" file="$(find myur5_moveit_config)/config/kinematics.yaml"/>

  </group>


  <!-- iniciar nodo moveit  -->
  <!-- <include file="$(find myur5_moveit_config)/launch/myur5_planning_execution.launch"/> -->



<!-- 


  <! Load joint controller parameters for Gazebo -->
  <rosparam file="$(find myur5_moveit_config)/config/gazebo_controllers.yaml" />
  <!-- Spawn Gazebo ROS controllers -->
  <!-- <node name="gazebo_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller" /> -->
  <!-- Load ROS controllers -->
  <include file="$(find myur5_moveit_config)/launch/ros_controllers.launch"/> -->

    
  <!-- Lanzar el controlador arm -->
  <!-- <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="arm_controller"/> -->

  <!-- Lanzar el nodo C++ para cambiar las posiciones iniciales -->
  <!-- <node name="set_initial_joint_state_node" pkg="myur5_description" type="set_initial_joint_state_node" output="screen"/> -->
    <!-- <node pkg="myur5_description" type="set_initial_joint_state_node" name="set_initial_joint_state_node" output="screen">
    </node> -->

</launch>